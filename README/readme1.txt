Вот код примера:

# SuperFastPython.com
# пример работы с асинхронным менеджером контекста и с async with
import asyncio
 
# определение асинхронного менеджера контекста
class AsyncContextManager:
    # вход в асинхронный менеджер контекста
    async def __aenter__(self):
        # вывод сообщения
        print('>entering the context manager')
        # блокировка на некоторое время
        await asyncio.sleep(0.5)
 
    # выход из асинхронного менеджера контекста
    async def __aexit__(self, exc_type, exc, tb):
        # вывод сообщения
        print('>exiting the context manager')
        # блокировка на некоторое время
        await asyncio.sleep(0.5)
 
# определение простой корутины
async def custom_coroutine():
    # создание и использование асинхронного менеджера контекста
    async with AsyncContextManager() as manager:
        # вывод результирующего сообщения
        print(f'within the manager')
 
# запуск asyncio-программы
asyncio.run(custom_coroutine())

При запуске этой программы создаётся главная корутина, 
custom_coroutine(), которая используется в качестве точки 
входа в asyncio-программу.

Главная корутина запускается и создаёт, 
в выражении async with, экземпляр нашего класса AsyncContextManager.

Это выражение автоматически вызывает метод __aenter__() и 
ожидает завершения работы корутины, которой он является. 
Выводится сообщение, корутина на некоторое время блокируется.

Главная корутина возобновляет работу и выполняет тело менеджера контекста, 
выводя сообщение.

Далее — программа выходит из блока тела менеджера и 
вызывающая сторона ожидает завершения работы метода __aexit__(), 
который выводит сообщение и на некоторое время «засыпает».

Здесь показана обычная схема использования асинхронных менеджеров 
контекста в asyncio-программах.

>entering the context manager
within the manager
>exiting the context manager
Подробности об асинхронных менеджерах контекста можно найти здесь.

Теперь обсудим асинхронные comprehension-выражения.
